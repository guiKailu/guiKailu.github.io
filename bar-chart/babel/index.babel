const w = 700;
const h = 500;
const padding = 50;

function doD3stuff(rawdata) {
  //converts years to floats:
  const dataset = rawdata.map(val => {
    const year = val[0].match(/\d{4}/);
    const month = val[0].match(/\D\d{2}\D/)[0].match(/\d+/);
    let mon;
    switch (parseInt(month)) {
      case 1:
        mon = 0;
        break;
      case 4:
        mon = 0.25;
        break;
      case 7:
        mon = 0.5;
        break;
      case 10:
        mon = 0.75;
        break;
    }
    return [parseInt(year) + mon, val[1]];
  });

  //EDIT THIS LATER TO BE THE DATE
  const xScale = d3
    .scaleLinear()
    .domain([d3.min(dataset, d => d[0]), d3.max(dataset, d => d[0])])
    .range([padding, w - padding]);
  const yScale = d3
    .scaleLinear()
    .domain([0, d3.max(dataset, d => d[1])])
    .range([h - padding, padding]);

  const svg = d3
    .select("body")
    .append("svg")
    .attr("width", w)
    .attr("height", h);

  svg
    .selectAll("rect")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("x", d => xScale(d[0]))
    .attr("y", d => yScale(d[1])) //here
    .attr("width", 1)
    .attr("height", d => h - yScale(d[1]) - padding) //or here
    .attr("class", "bar")
    .attr("fill", d => {
      return d[0] % 20 < 10 ? "blue" : "red";
    })
    .attr('data-date', (d) => {
      let Q;
      if (d[0]%1 === 0){
        Q = 1;
      } else if (d[0]%1 === 1) {
        Q = 2;
      } else if (d[0]%1 === 2) {
        Q = 3;
      } else if (d[0]%1 === 3) {
        Q = 4;
      }
      return d[0]%1 + " Q" + Q
    })
    .attr("data-gdp", (d) => d[1]);
  
  svg.selectAll("rect")
      .data(dataset)
      .enter()
      .append("title")
      .text("hi");
  
  /*
    .append("title")
  
  svg.selectAll("text")
        .data(dataset)
        .enter()
        .append("text"); */
        
    
  console.log(dataset.map(val => yScale(val[1])));
  const xAxis = d3.axisBottom(xScale);

  svg
    .append("g")
    .attr("transform", `translate( 0, ${h - padding})`)
    .call(xAxis)
    .attr("id", "x-axis");
  //Both axes should contain multiple tick labels, each with the corresponding class="tick".

  const yAxis = d3.axisLeft(yScale);

  svg
    .append("g")
    .attr("transform", `translate( ${padding}, 0)`)
    .call(yAxis)
    .attr("id", "y-axis");
  //Both axes should contain multiple tick labels, each with the corresponding class="tick".
}

//import the data:
document.addEventListener("DOMContentLoaded", function() {
  req = new XMLHttpRequest();
  req.open(
    "GET",
    "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json",
    true
  );
  req.send();
  req.onload = function() {
    json = JSON.parse(req.responseText);
    doD3stuff(json.data);
  };
});
